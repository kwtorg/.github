name: Reusable Per-Architecture Deployment

on:
  workflow_call:
    secrets:
      DOT_ENV:
        required: false # 선택적 입력: docker-compose.yml 에서 .env 필요시만 사용됨

jobs:
  sync-and-deploy:
    strategy:
      matrix:
        architecture: [arm64, amd64]
    runs-on:
      - self-hosted
      - ${{ matrix.architecture }}

    steps:
      # 1. 베이스 디렉토리 생성
      - name: Create base repositories directory
        shell: bash
        run: |
          mkdir -p /home/ubuntu/repositories
          echo "✅ Base directory /home/ubuntu/repositories is ready."

      # 2. Runner 기본 위치에 Checkout 수행
      - name: Checkout source
        uses: actions/checkout@v4

      # 3. /home/ubuntu/repositories/{repo} 로 소스 동기화
      - name: Sync repository to /home/ubuntu/repositories
        shell: bash
        run: |
          mkdir -p /home/ubuntu/repositories/${{ github.event.repository.name }}
          # rsync 권장 (없다면 sudo apt install -y rsync 필요)
          rsync -av --delete $GITHUB_WORKSPACE/ /home/ubuntu/repositories/${{ github.event.repository.name }}/
          echo "✅ Repository synced to /home/ubuntu/repositories/${{ github.event.repository.name }}"

      # 4. GitHub Secret을 기반으로 .env 파일 자동 생성
      - name: Create .env file if required
        id: create-dotenv
        working-directory: /home/ubuntu/repositories/${{ github.event.repository.name }}
        shell: bash
        env:
          DOT_ENV: ${{ secrets.DOT_ENV }}
        run: |
          if grep -q "env_file:" docker-compose.template.yml; then
            echo "ℹ️ docker-compose.template.yml requires an .env file."

            if [ -n "$DOT_ENV" ]; then
              echo "🔑 DOT_ENV secret found. Creating .env file..."
              echo "$DOT_ENV" > .env
              echo "✅ .env file created successfully."
            else
              echo "❌ DOT_ENV secret is missing, but docker-compose.yml requires .env"
              exit 1
            fi
          else
            echo "ℹ️ docker-compose.template.yml does not reference an .env file. Skipping."
          fi

      # 5. docker-compose.template.yml ➝ docker-compose.yml 치환
      - name: Generate docker-compose.yml from template
        working-directory: /home/ubuntu/repositories/${{ github.event.repository.name }}
        shell: bash
        run: |
          export REPO_NAME=${{ github.event.repository.name }}
          export HOST_REPO_PATH=/home/ubuntu/repositories/${{ github.event.repository.name }}
          envsubst < docker-compose.template.yml > docker-compose.yml
          echo "✅ docker-compose.yml generated successfully."

      # 6. Docker 볼륨 디렉토리 생성
      - name: Create directories for Docker volumes
        working-directory: /home/ubuntu/repositories/${{ github.event.repository.name }}
        shell: bash
        run: |
          if [ -f .volume_dirs ]; then
            echo "📄 .volume_dirs file found. Creating specified directories..."
            grep -v '^#' .volume_dirs | grep -v '^[[:space:]]*$' | xargs mkdir -p
            echo "✅ All directories for volumes are created."
          else
            echo "ℹ️ .volume_dirs file not found, skipping directory creation."
          fi

      # 7. 조건부 빌드 및 배포
      - name: Build and Deploy (if [deploy] is in commit message)
        if: contains(github.event.head_commit.message, '[deploy]')
        working-directory: /home/ubuntu/repositories/${{ github.event.repository.name }}
        shell: bash
        run: |
          REPO_NAME=${{ github.event.repository.name }}
          echo "🚀 Commit includes [deploy], starting build and deploy process for $REPO_NAME on ${{ matrix.architecture }}..."
          docker compose --project-name $REPO_NAME build
          docker compose --project-name $REPO_NAME up -d --remove-orphans
          docker builder prune -f
          echo "🎉 ${{ matrix.architecture }} deployment completed successfully for $REPO_NAME!"

      # 8. [deploy] 없으면 sync만 수행
      - name: Notify code sync only
        if: "!contains(github.event.head_commit.message, '[deploy]')"
        run: |
          echo "✅ Code sync completed for ${{ github.event.repository.name }} on ${{ matrix.architecture }}. No [deploy] keyword found, skipping build and deployment."
