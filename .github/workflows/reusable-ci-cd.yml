# 파일: .github/.github/workflows/reusable-ci-cd.yml

name: Reusable Per-Architecture Deployment

on:
  workflow_call:

jobs:
  # --- 잡 1: ARM64 서버에 배포 ---
  deploy-arm64:
    # ℹ️ 수정 불필요: [deploy] 커밋일 때만 실행됩니다.
    if: "contains(github.event.head_commit.message, '[deploy]')"
    # ℹ️ 수정 불필요: 'arm64' 레이블이 달린 Runner에서만 이 잡을 실행합니다.
    runs-on:
      - self-hosted
      - arm64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build and Deploy on ARM64 Server
        working-directory: ${{ github.workspace }}
        run: |
          REPO_NAME=${{ github.event.repository.name }}
          echo "🚀 Starting ARM64 deployment for $REPO_NAME..."
          # ARM64 Runner가 ARM64 서버에서 직접 네이티브 빌드를 수행합니다.
          docker compose --project-name $REPO_NAME build
          docker compose --project-name $REPO_NAME up -d
          docker builder prune -f
          echo "🎉 ARM64 deployment completed successfully for $REPO_NAME!"

  # --- 잡 2: AMD64(Intel) 서버에 배포 ---
  deploy-amd64:
    # ℹ️ 수정 불필요: [deploy] 커밋일 때만 실행됩니다.
    if: "contains(github.event.head_commit.message, '[deploy]')"
    # ℹ️ 수정 불필요: 'amd64' 레이블이 달린 Runner에서만 이 잡을 실행합니다.
    runs-on:
      - self-hosted
      - amd64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build and Deploy on AMD64 Server
        working-directory: ${{ github.workspace }}
        run: |
          REPO_NAME=${{ github.event.repository.name }}
          echo "🚀 Starting AMD64 deployment for $REPO_NAME..."
          # AMD64 Runner가 Intel 서버에서 직접 네이티브 빌드를 수행합니다.
          docker compose --project-name $REPO_NAME build
          docker compose --project-name $REPO_NAME up -d
          docker builder prune -f
          echo "🎉 AMD64 deployment completed successfully for $REPO_NAME!"
