name: Reusable GHCR Deployment Workflow

on:
  workflow_call:
    secrets:
      DOT_ENV_PROD:   # 서버 배포환경용 secrets (production)
        required: true

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write   # GHCR push 권한

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 🚩 리포지토리 이름을 소문자로 변환해서 GHCR에 쓰기
      - name: Normalize image name
        run: echo "IMAGE_REPO=ghcr.io/${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_REPO }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.IMAGE_REPO }}:latest
            ${{ env.IMAGE_REPO }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: [self-hosted, linux]
    needs: build-and-push-image

    env:
      REPO_NAME: ${{ github.event.repository.name }}
      REPO_DIR: /volume1/docker/repositories/${{ github.event.repository.name }}
      COMMIT_MSG: ${{ github.event.head_commit.message }}

    steps:
      - name: Ensure repo directory exists
        working-directory: /
        run: mkdir -p $REPO_DIR

      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Sync code into NAS repo dir
        run: rsync -av --delete $GITHUB_WORKSPACE/ $REPO_DIR/

      - name: Create .env from Secrets
        env:
          DOT_ENV_PROD: ${{ secrets.DOT_ENV_PROD }}
        run: |
          cat <<EOF > $REPO_DIR/.env
          $DOT_ENV_PROD
          EOF
          if ! grep -q "HOST_PORT=" $REPO_DIR/.env; then
            echo "❌ HOST_PORT not found"; exit 1;
          fi

      - name: Debug NAS repo contents
        run: ls -al $REPO_DIR

      - name: Check if commit contains [deploy]
        id: deploy_check
        run: |
          echo "commit: $COMMIT_MSG"
          if [[ "$COMMIT_MSG" == *"[deploy]"* ]]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
          else
            echo "deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: Stop existing containers
        if: steps.deploy_check.outputs.deploy == 'true'
        working-directory: ${{ env.REPO_DIR }}   # 👈 추가 완료
        run: docker compose -f docker-compose.yml --project-name $REPO_NAME down --remove-orphans || true

      - name: Deploy latest image
        if: steps.deploy_check.outputs.deploy == 'true'
        working-directory: ${{ env.REPO_DIR }}
        run: docker compose -f docker-compose.yml --project-name $REPO_NAME up -d --remove-orphans

      - name: Cleanup old docker images
        if: steps.deploy_check.outputs.deploy == 'true'
        run: docker image prune -af --filter "until=72h"

      - name: Sync code only (no deploy)
        if: steps.deploy_check.outputs.deploy == 'false'
        run: echo "✅ 코드 & .env NAS에 최신화 완료 (배포는 생략됨)"
