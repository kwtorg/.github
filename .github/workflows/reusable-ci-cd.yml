# ===================================================================
# Reusable Self-Hosted CI/CD Workflow
# -------------------------------------------------------------------
# 이 워크플로우는 self-hosted runner가 설치된 서버에서 직접
# 소스코드를 빌드하고 배포하는 작업을 수행합니다.
# GHCR 같은 외부 이미지 레지스트리를 사용하지 않습니다.
# ===================================================================
name: Reusable Self-Hosted CI/CD Workflow

on:
  workflow_call:
    secrets:
      DOT_ENV_PROD:
        required: true

jobs:
  build-and-deploy:
    # ✅ 모든 작업을 self-hosted runner에서 실행
    runs-on: [self-hosted, linux]

    env:
      REPO_NAME: ${{ github.event.repository.name }}
      REPO_DIR: /volume1/docker/repositories/${{ github.event.repository.name }}
      COMMIT_MSG: ${{ github.event.head_commit.message }}

    steps:
      # --- 1. 서버 환경 준비 ---
      - name: Ensure repo directory exists
        working-directory: /
        run: mkdir -p $REPO_DIR

      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Sync code into NAS repo dir
        run: rsync -av --delete $GITHUB_WORKSPACE/ $REPO_DIR/

      - name: Create .env from Secrets
        env:
          DOT_ENV_PROD: ${{ secrets.DOT_ENV_PROD }}
        run: |
          echo "Writing .env file to $REPO_DIR/.env"
          cat <<EOF > $REPO_DIR/.env
          $DOT_ENV_PROD
          EOF
          if ! grep -q "HOST_PORT=" $REPO_DIR/.env; then
            echo "❌ HOST_PORT not found in .env file"; exit 1;
          fi

      # --- 2. 배포 조건 확인 ---
      - name: Check if commit contains [deploy]
        id: deploy_check
        run: |
          echo "Commit message: $COMMIT_MSG"
          if [[ "$COMMIT_MSG" == *"[deploy]"* ]]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
            echo "✅ Deployment will proceed."
          else
            echo "deploy=false" >> $GITHUB_OUTPUT
            echo "ℹ️ Commit message does not contain [deploy]. Skipping deployment."
          fi

      # --- 3. 배포 실행 ---
      - name: Stop existing containers
        if: steps.deploy_check.outputs.deploy == 'true'
        working-directory: ${{ env.REPO_DIR }}
        run: docker compose -f docker-compose.yml --project-name $REPO_NAME down --remove-orphans || true

      # ✅ [핵심] 로컬에서 직접 이미지를 빌드하고 컨테이너를 재시작
      - name: Build and Deploy service
        if: steps.deploy_check.outputs.deploy == 'true'
        working-directory: ${{ env.REPO_DIR }}
        run: docker compose -f docker-compose.yml --project-name $REPO_NAME up -d --build --remove-orphans

      # --- 4. 시스템 정리 ---
      - name: Cleanup old docker images
        if: steps.deploy_check.outputs.deploy == 'true'
        run: docker image prune -af --filter "until=72h"

      - name: Sync code only (no deploy)
        if: steps.deploy_check.outputs.deploy == 'false'
        run: echo "✅ Code and .env file have been updated on the NAS. (Deployment skipped)"
