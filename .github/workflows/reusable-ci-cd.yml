# 파일 위치 : .github/.github/workflows/reusable-ci-cd.yml
name: Reusable Per-Architecture Deployment

on:
  workflow_call:
    secrets:
      DOT_ENV:
        required: true   # .env 반드시 필요 (HOST_PORT 포함)

jobs:
  sync-and-deploy:
    if: ${{ github.repository != 'kwtorg/project-template' }}
    strategy:
      matrix:
        architecture: [arm64, amd64]
    runs-on:
      - self-hosted
      - ${{ matrix.architecture }}

    steps:
      # 1. 베이스 디렉터리 생성
      - name: Create base repositories directory
        shell: bash
        run: mkdir -p /home/ubuntu/repositories

      # 2. Checkout
      - name: Checkout source
        uses: actions/checkout@v4

      # 3. 소스 동기화
      - name: Sync repository to /home/ubuntu/repositories
        shell: bash
        run: |
          mkdir -p /home/ubuntu/repositories/${{ github.event.repository.name }}
          rsync -av --delete $GITHUB_WORKSPACE/ /home/ubuntu/repositories/${{ github.event.repository.name }}/

      # 4. .env 파일 생성 (DOT_ENV -> .env)
      - name: Create .env file from DOT_ENV secret
        working-directory: /home/ubuntu/repositories/${{ github.event.repository.name }}
        shell: bash
        env:
          DOT_ENV: ${{ secrets.DOT_ENV }}
        run: |
          echo "$DOT_ENV" > .env
          if ! grep -q "HOST_PORT=" .env; then
            echo "❌ HOST_PORT not set in DOT_ENV secret!"
            exit 1
          fi
          echo "✅ .env file created with HOST_PORT"

      # 5. Docker 볼륨 디렉토리 생성
      - name: Create directories for Docker volumes
        working-directory: /home/ubuntu/repositories/${{ github.event.repository.name }}
        shell: bash
        run: |
          if [ -f .volume_dirs ]; then
            grep -v '^#' .volume_dirs | grep -v '^[[:space:]]*$' | xargs mkdir -p
            echo "✅ Volume directories created"
          else
            echo "ℹ️ .volume_dirs not found, skipping"
          fi

      # 5.5. 기존 컨테이너 정리
      - name: Stop and remove existing containers
        if: contains(github.event.head_commit.message, '[deploy]')
        working-directory: /home/ubuntu/repositories/${{ github.event.repository.name }}
        shell: bash
        run: |
          echo "🛑 Stopping and removing existing containers..."
          docker compose --project-name ${{ github.event.repository.name }} down --remove-orphans || true

      # 6. Build & Deploy
      - name: Build and Deploy (if [deploy] is in commit message)
        if: contains(github.event.head_commit.message, '[deploy]')
        working-directory: /home/ubuntu/repositories/${{ github.event.repository.name }}
        shell: bash
        run: |
          export REPO_NAME=${{ github.event.repository.name }}
          export HOST_REPO_PATH=/home/ubuntu/repositories/${{ github.event.repository.name }}
          export COMMIT_SHA=${{ github.sha }}

          echo "🚀 Building $REPO_NAME ($COMMIT_SHA, tagging also as latest)..."
          docker build -t $REPO_NAME:$COMMIT_SHA -t $REPO_NAME:latest .

          docker compose --project-name $REPO_NAME up -d --remove-orphans

          docker builder prune -f
          echo "🎉 Deployment completed for $REPO_NAME!"

      # 7. deploy keyword 없으면 sync만
      - name: Notify code sync only
        if: "!contains(github.event.head_commit.message, '[deploy]')"
        run: echo "✅ Code synced (no deploy)"

      # 8. 오래된 이미지 정리
      - name: Cleanup old docker images
        shell: bash
        run: |
          docker image prune -af --filter "until=72h"
