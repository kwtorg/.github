# 파일 위치 : .github/.github/workflows/reusable-ci-cd.yml
name: Reusable GHCR Deployment Workflow

on:
  workflow_call:
    secrets:
      DOT_ENV_PROD:   # 서버 배포환경용 secrets (production)
        required: true

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: [self-hosted, linux]
    needs: build-and-push-image

    env:
      REPO_NAME: ${{ github.event.repository.name }}
      REPO_DIR: /volume1/docker/repositories/${{ github.event.repository.name }}
      COMMIT_MSG: ${{ github.event.head_commit.message }}

    defaults:
      run:
        working-directory: ${{ env.REPO_DIR }}

    steps:
      - name: Ensure repo directory exists
        working-directory: /
        run: mkdir -p $REPO_DIR

      # 1. 러너 기본 디렉토리로 코드 체크아웃
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 1    # 최신 커밋만 가져오기 (속도 최적화)
  
      # 2. NAS 공유 디렉토리로 소스 전체 복사
      - name: Sync code into NAS repo dir
        run: rsync -av --delete ./ $REPO_DIR/
  
      # 3. NAS 폴더에 .env 생성
      - name: Create .env from Secrets
        env:
          DOT_ENV_PROD: ${{ secrets.DOT_ENV_PROD }}
        run: |
          cat <<EOF > $REPO_DIR/.env
          $DOT_ENV_PROD
          EOF
          if ! grep -q "HOST_PORT=" $REPO_DIR/.env; then
            echo "❌ HOST_PORT not found"; exit 1;
          fi
  
      # 4. [deploy] 여부 확인
      - name: Check if commit contains [deploy]
        id: deploy_check
        run: |
          echo "commit: $COMMIT_MSG"
          if [[ "$COMMIT_MSG" == *"[deploy]"* ]]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
          else
            echo "deploy=false" >> $GITHUB_OUTPUT
          fi
  
      # 5. docker compose 배포 (필요할 때만)
      - name: Stop existing containers
        if: steps.deploy_check.outputs.deploy == 'true'
        run: docker compose --project-name $REPO_NAME down --remove-orphans || true
  
      - name: Deploy latest image
        if: steps.deploy_check.outputs.deploy == 'true'
        working-directory: ${{ env.REPO_DIR }}
        run: docker compose --project-name $REPO_NAME up -d --remove-orphans
  
      - name: Cleanup old docker images
        if: steps.deploy_check.outputs.deploy == 'true'
        run: docker image prune -af --filter "until=72h"
  
      - name: Sync code only (no deploy)
        if: steps.deploy_check.outputs.deploy == 'false'
        run: echo "✅ 코드 & .env NAS에 최신화 완료 (배포는 생략됨)"
