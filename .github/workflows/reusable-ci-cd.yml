# 파일 경로: .github/.github/workflows/reusable-ci-cd.yml
# 역할: .env 자동 생성 기능이 포함된 최종 CI/CD 워크플로우

name: Reusable Per-Architecture Deployment

on:
  workflow_call:
    # ℹ️ 호출하는 워크플로우로부터 secrets를 전달받기 위해 명시적으로 선언합니다.
    secrets:
      DOT_ENV:
        required: false # 이 secret이 없어도 워크플로우는 실패하지 않습니다.

jobs:
  sync-and-deploy:
    strategy:
      matrix:
        architecture: [arm64, amd64]
    runs-on:
      - self-hosted
      - ${{ matrix.architecture }}

    steps:
      # 1. 베이스 디렉터리 생성
      - name: Create base repositories directory
        shell: bash
        run: |
          mkdir -p ~/repositories
          echo "✅ Base directory ~/repositories is ready."

      # 2. 지정된 경로로 소스 코드 체크아웃
      - name: Checkout repository to specific path
        uses: actions/checkout@v4
        with:
          path: '~/repositories/${{ github.event.repository.name }}'
      
      # ✨ [수정] 3. GitHub Secret으로 .env 파일 자동 생성
      - name: Create .env file if required
        id: create-dotenv
        working-directory: '~/repositories/${{ github.event.repository.name }}'
        shell: bash
        run: |
          # docker-compose.yml 에 env_file 옵션이 있는지 체크
          if grep -q "env_file:" docker-compose.yml; then
            echo "ℹ️ docker-compose.yml requires an .env file."
            
            # secret 이 정의되어 있다면 .env 파일 생성
            if [ -n "${{ secrets.DOT_ENV }}" ]; then
              echo "🔑 DOT_ENV secret found. Creating .env file..."
              echo "${{ secrets.DOT_ENV }}" > .env
              echo "✅ .env file created successfully."
            else
              echo "❌ DOT_ENV secret is missing, but docker-compose.yml requires .env"
              exit 1
            fi
          else
            echo "ℹ️ docker-compose.yml does not reference an .env file. Skipping."
          fi

      # 4. Docker 볼륨을 위한 디렉터리 생성
      - name: Create directories for Docker volumes
        working-directory: '~/repositories/${{ github.event.repository.name }}'
        shell: bash
        run: |
          if [ -f .volume_dirs ]; then
            echo "📄 .volume_dirs file found. Creating specified directories..."
            grep -v '^#' .volume_dirs | grep -v '^[[:space:]]*$' | xargs mkdir -p
            echo "✅ All directories for volumes are created."
          else
            echo "ℹ️ .volume_dirs file not found, skipping directory creation."
          fi

      # 5. 조건부 빌드 및 배포
      - name: Build and Deploy (if [deploy] is in commit message)
        if: "contains(github.event.head_commit.message, '[deploy]')"
        working-directory: '~/repositories/${{ github.event.repository.name }}'
        run: |
          REPO_NAME=${{ github.event.repository.name }}
          echo "🚀 Commit includes [deploy], starting build and deploy process for $REPO_NAME on ${{ matrix.architecture }}..."
          docker compose --project-name $REPO_NAME build
          docker compose --project-name $REPO_NAME up -d --remove-orphans
          docker builder prune -f
          echo "🎉 ${{ matrix.architecture }} deployment completed successfully for $REPO_NAME!"

      # 6. [deploy]가 없을 경우 알림 메시지 출력
      - name: Notify code sync only
        if: "!contains(github.event.head_commit.message, '[deploy]')"
        run: |
          echo "✅ Code sync completed for ${{ github.event.repository.name }} on ${{ matrix.architecture }}. No [deploy] keyword found, skipping build and deployment."
