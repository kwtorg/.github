name: Reusable Self-Hosted CI/CD Workflow

on:
  workflow_call:
    secrets:
      DOT_ENV_PROD:
        required: true

jobs:
  build-and-deploy:
    runs-on: self-hosted
    env:
      REPO_NAME: ${{ github.event.repository.name }}
      APP_DIR: /home/kwtkwt/docker/apps/${{ github.event.repository.name }}
      COMMIT_MSG: ${{ github.event.head_commit.message }}
      
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Ensure target directory exists
        run: mkdir -p ${{ env.APP_DIR }}

      - name: Normalize permissions before sync
        run: |
          echo "🔧 Ensuring correct ownership..."
          sudo chown -R $(whoami):$(whoami) ${{ env.APP_DIR }} || true
          sudo find ${{ env.APP_DIR }} -type d -exec chmod 755 {} \;
          sudo find ${{ env.APP_DIR }} -type f -exec chmod 644 {} \;

      - name: Detect docker volume mount directories
        id: detect_volumes
        working-directory: ${{ env.APP_DIR }}
        run: |
          EXCLUDES=""
          if [ -f docker-compose.yml ]; then
            echo "🔍 Parsing docker-compose.yml for volume mounts..."
            EXCLUDES=$(grep "^\s*-\s\+\." docker-compose.yml | awk -F ':' '{print $1}' | sed 's/^- *\.\/\(.*\)/--exclude "\1\//g' | tr '\n' ' ')
            echo "Detected exclude patterns: $EXCLUDES"
          fi
          echo "EXCLUDES=$EXCLUDES" >> $GITHUB_OUTPUT

      - name: Sync code into target app dir
        run: |
          echo "🚚 Syncing code to server..."
          rsync -av --delete ${{ steps.detect_volumes.outputs.EXCLUDES }} \
            $GITHUB_WORKSPACE/ ${{ env.APP_DIR }}/
        
      - name: Create .env from Secrets
        env:
          DOT_ENV_PROD: ${{ secrets.DOT_ENV_PROD }}
        run: |
          echo "📄 Creating .env file..."
          cat <<EOF > ${{ env.APP_DIR }}/.env
          $DOT_ENV_PROD
          EOF

      - name: Check for [deploy] keyword
        id: deploy_check
        run: |
          if [[ "${{ env.COMMIT_MSG }}" == *"[deploy]"* ]]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
          else
            echo "deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: Stop, Build, and Deploy
        if: steps.deploy_check.outputs.deploy == 'true'
        working-directory: ${{ env.APP_DIR }}
        run: |
          echo "🚀 Deploying containers with host UID/GID..."
          UID=$(id -u)
          GID=$(id -g)
          docker compose -f docker-compose.yml \
            --project-name $REPO_NAME \
            up -d --build --remove-orphans --force-recreate \
            --user "${UID}:${GID}"

      - name: Cleanup old docker images
        if: steps.deploy_check.outputs.deploy == 'true'
        run: |
          echo "🧹 Cleaning up old images..."
          docker image prune -af --filter "until=72h"
