# ===================================================================
# [Template] Reusable Self-Hosted CI/CD Workflow
# -------------------------------------------------------------------
# 이 워크플로우는 self-hosted runner가 설치된 서버에서 직접
# 소스코드를 빌드하고 배포하는 작업을 수행합니다.
# 외부 이미지 레지스트리를 사용하지 않아 빠르고 간결합니다.
# ===================================================================
# ===================================================================
# [Template] Reusable Self-Hosted CI/CD Workflow (with runner input)
# -------------------------------------------------------------------
# 이 워크플로우는 self-hosted runner가 설치된 서버에서 직접
# 소스코드를 빌드하고 배포하는 작업을 수행합니다.
# 외부 이미지 레지스트리를 사용하지 않아 빠르고 간결합니다.
# 실행할 러너 라벨을 input.runner 로 받아 유연하게 지정할 수 있습니다.
# ===================================================================
name: Reusable Self-Hosted CI/CD Workflow

on:
  workflow_call:
    secrets:
      DOT_ENV_PROD:
        required: true

jobs:
  build-and-deploy:
    runs-on: [self-hosted, "${{ vars.DEPLOY_RUNNER }}"]
    env:
      REPO_NAME: ${{ github.event.repository.name }}
      REPO_DIR: /volume1/docker/repositories/${{ github.event.repository.name }}
      COMMIT_MSG: ${{ github.event.head_commit.message }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Ensure target directory exists
        run: mkdir -p $REPO_DIR        
        
      - name: Sync code into NAS repo dir
        run: rsync -av --delete $GITHUB_WORKSPACE/ $REPO_DIR/
        
      - name: Create .env from Secrets
        env:
          DOT_ENV_PROD: ${{ secrets.DOT_ENV_PROD }}
        run: |
          cat <<EOF > $REPO_DIR/.env
          $DOT_ENV_PROD
          EOF

      - name: Check for [deploy] keyword
        id: deploy_check
        run: |
          if [[ "${{ env.COMMIT_MSG }}" == *"[deploy]"* ]]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
          else
            echo "deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: Stop, Build, and Deploy
        if: steps.deploy_check.outputs.deploy == 'true'
        working-directory: ${{ env.REPO_DIR }}
        run: docker compose -f docker-compose.yml --project-name $REPO_NAME up -d --build --remove-orphans

      - name: Cleanup old docker images
        if: steps.deploy_check.outputs.deploy == 'true'
        run: docker image prune -af --filter "until=72h"
