# 파일 위치 : .github/.github/workflows/reusable-ci-cd.yml
name: Reusable GHCR Deployment Workflow

on:
  workflow_call:
    secrets:
      DOT_ENV_PROD:   # 서버 배포환경용 secrets (production)
        required: true

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    permissions:
      contents: read        # 코드 체크아웃 권한
      packages: write       # GHCR 배포 권한

    steps:
      # 1. 코드 체크아웃
      - name: Checkout source
        uses: actions/checkout@v4

      # 2. QEMU & Buildx 멀티아키 지원
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. GHCR 로그인
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 4. 메타데이터 설정
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      # 5. 멀티스테이지 빌드 & GHCR 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: [self-hosted, linux]   # 서버에 설치된 self-hosted runner
    needs: build-and-push-image
    environment: production
    secrets: inherit

    steps:
      - name: Setup repository directory
        run: |
          mkdir -p /home/ubuntu/repositories/${{ github.event.repository.name }}
          cd /home/ubuntu/repositories/${{ github.event.repository.name }}

      # .env 생성
      - name: Create .env file from secrets
        working-directory: /home/ubuntu/repositories/${{ github.event.repository.name }}
        env:
          DOT_ENV_PROD: ${{ secrets.DOT_ENV_PROD }}
        run: |
          echo "$DOT_ENV_PROD" > .env
          if ! grep -q "HOST_PORT=" .env; then
            echo "❌ HOST_PORT not found in DOT_ENV_PROD!"
            exit 1
          fi
          echo "✅ .env created with HOST_PORT"

      # 기존 컨테이너 중지
      - name: Stop existing containers
        working-directory: /home/ubuntu/repositories/${{ github.event.repository.name }}
        run: |
          echo "🛑 Stopping existing containers..."
          docker compose --project-name ${{ github.event.repository.name }} down --remove-orphans || true

      # GHCR Pull & Deploy
      - name: Deploy using docker-compose
        working-directory: /home/ubuntu/repositories/${{ github.event.repository.name }}
        run: |
          echo "🚀 Deploying ghcr.io/${{ github.repository }}:latest ..."
          docker compose --project-name ${{ github.event.repository.name }} up -d --remove-orphans
          echo "🎉 Deployment completed"

      # 오래된 이미지 정리
      - name: Cleanup old docker images
        run: docker image prune -af --filter "until=72h"
